---
name: Molecule tests

on: [push, pull_request, pull_request_review, workflow_dispatch]

env:
  CARTRIDGE_CLI_VERSION: '2.12.7'

jobs:
  setup-molecule-test-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup matrix for Molecule tests
        id: setup-matrix
        run: |
          python -V
          python .github/helpers/count_molecule_matrix.py \
            --event_name "${{ github.event_name }}" \
            --repo_owner "${{ github.event.pull_request.head.repo.owner.login }}" \
            --review_state "${{ github.event.review.state }}" \
            --ref "${{ github.ref }}"
    outputs:
      ce-matrix: ${{ steps.setup-matrix.outputs.ce-matrix }}
      ce-tests-found: ${{ steps.setup-matrix.outputs.ce-tests-found }}
      ee-matrix: ${{ steps.setup-matrix.outputs.ee-matrix }}
      ee-tests-found: ${{ steps.setup-matrix.outputs.ee-tests-found }}

  molecule-tests-ce:
    needs: setup-molecule-test-matrix
    runs-on: ubuntu-latest
    if: needs.setup-molecule-test-matrix.outputs.ce-tests-found == 'true'
    strategy:
      matrix: ${{ fromJson(needs.setup-molecule-test-matrix.outputs.ce-matrix) }}
      fail-fast: false
    steps:
      - name: Prepare to cache results
        id: cache
        run: |
          rm -f ${{ runner.temp }}/prev_result || true
          echo "::set-output name=key::${{ matrix.molecule_scenario }}-${{ matrix.ansible_version }}-${{ matrix.python_version }}-${{ matrix.tarantool_version }}-${{ matrix.molecule_command }}"
          echo "::set-output name=time::$(/bin/date -u "+%Y%m%d%H%M%S")"
      - name: Restore the previous run result
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/prev_result
          key: ${{ github.run_id }}-${{ github.job }}-${{ steps.cache.outputs.key }}-${{ steps.cache.outputs.time }}
          restore-keys: ${{ github.run_id }}-${{ github.job }}-${{ steps.cache.outputs.key }}-
      - name: Parse previous result
        id: prev_result
        run: cat ${{ runner.temp }}/prev_result 2>/dev/null || echo "no previous result"

      - if: steps.prev_result.outputs.status != 'success'
        uses: actions/checkout@v3

      - name: Setup python
        if: steps.prev_result.outputs.status != 'success'
        uses: actions/setup-python@v4
        with:
          python-version: '${{ matrix.python_version }}'

      - name: Cache python dependencies
        if: steps.prev_result.outputs.status != 'success'
        id: python-dependencies
        uses: actions/cache@v2
        with:
          path: 'venv'
          key: venv-${{ matrix.python_version }}-${{ hashFiles('./requirements.txt') }}-${{ matrix.ansible_version }}

      - name: Install molecule requirements
        if: steps.python-dependencies.outputs.cache-hit != 'true' && steps.prev_result.outputs.status != 'success'
        run: |
          python -V
          if [ "${{ matrix.python_version }}" = "2.7" ]; then
              pip install virtualenv
              virtualenv venv
          else
              python -m venv venv
          fi
          venv/bin/pip install --upgrade -r requirements.txt
          venv/bin/pip uninstall -y ansible ansible-base ansible-core
          venv/bin/pip install ansible~=${{ matrix.ansible_version }}

      - name: Cache test packages
        if: steps.prev_result.outputs.status != 'success'
        id: cache-packages
        uses: actions/cache@v2
        with:
          path: 'packages'
          key: ce-${{ matrix.tarantool_version }}-${{ env.CARTRIDGE_CLI_VERSION }}-${{ hashFiles('./create-packages.sh') }}

      - name: Install Tarantool
        if: steps.cache-packages.outputs.cache-hit != 'true' && steps.prev_result.outputs.status != 'success'
        uses: tarantool/setup-tarantool@v2
        with:
          tarantool-version: '${{ matrix.tarantool_version }}'

      - name: Create test packages
        if: steps.cache-packages.outputs.cache-hit != 'true' && steps.prev_result.outputs.status != 'success'
        run: |
          sudo apt-get update

          sudo apt-get -y install git gcc make cmake unzip
          git config --global user.email "test@tarantool.io" \
            && git config --global user.name "Tar Antool"

          curl -L https://tarantool.io/release/${{ matrix.tarantool_version }}/installer.sh | sudo -E bash -s
          sudo apt-get install -y cartridge-cli=${{ env.CARTRIDGE_CLI_VERSION }}

          tarantool --version
          cartridge version

          ./create-packages.sh --skip-tdg

      - name: Molecule test
        if: steps.prev_result.outputs.status != 'success'
        run: |
          source venv/bin/activate
          molecule --version
          molecule ${{ matrix.molecule_command }} -s '${{ matrix.molecule_scenario }}'

      - name: Remember result
        run: echo "::set-output name=status::${{ job.status }}" > ${{ runner.temp }}/prev_result

  molecule-tests-ee:
    needs: setup-molecule-test-matrix
    runs-on: ubuntu-latest
    if: needs.setup-molecule-test-matrix.outputs.ee-tests-found == 'true'
    strategy:
      matrix: ${{ fromJson(needs.setup-molecule-test-matrix.outputs.ee-matrix) }}
      fail-fast: false
    steps:
      - name: Prepare to cache results
        id: cache
        run: |
          rm -f ${{ runner.temp }}/prev_result || true
          echo "::set-output name=key::${{ matrix.molecule_scenario }}-${{ matrix.ansible_version }}-${{ matrix.python_version }}-${{ matrix.sdk_version }}-${{ matrix.molecule_command }}"
          echo "::set-output name=time::$(/bin/date -u "+%Y%m%d%H%M%S")"
      - name: Restore the previous run result
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/prev_result
          key: ${{ github.run_id }}-${{ github.job }}-${{ steps.cache.outputs.key }}-${{ steps.cache.outputs.time }}
          restore-keys: ${{ github.run_id }}-${{ github.job }}-${{ steps.cache.outputs.key }}-
      - name: Parse previous result
        id: prev_result
        run: cat ${{ runner.temp }}/prev_result 2>/dev/null || echo "no previous result"

      - if: steps.prev_result.outputs.status != 'success'
        uses: actions/checkout@v3

      - name: Setup python
        if: steps.prev_result.outputs.status != 'success'
        uses: actions/setup-python@v4
        with:
          python-version: '${{ matrix.python_version }}'

      - name: Cache python dependencies
        if: steps.prev_result.outputs.status != 'success'
        id: python-dependencies
        uses: actions/cache@v2
        with:
          path: 'venv'
          key: venv-${{ matrix.python_version }}-${{ hashFiles('./requirements.txt') }}-${{ matrix.ansible_version }}

      - name: Install molecule requirements
        if: steps.python-dependencies.outputs.cache-hit != 'true' && steps.prev_result.outputs.status != 'success'
        run: |
          python -V
          if [ "${{ matrix.python_version }}" = "2.7" ]; then
              pip install virtualenv
              virtualenv venv
          else
              python -m venv venv
          fi
          venv/bin/pip install --upgrade -r requirements.txt
          venv/bin/pip uninstall -y ansible ansible-base ansible-core
          venv/bin/pip install ansible~=${{ matrix.ansible_version }}

      - name: Cache test packages
        if: steps.prev_result.outputs.status != 'success'
        id: cache-packages
        uses: actions/cache@v2
        with:
          path: 'packages'
          key: sdk-${{ matrix.sdk_version }}-${{ hashFiles('./create-packages.sh') }}

      - name: Create test packages
        if: steps.cache-packages.outputs.cache-hit != 'true' && steps.prev_result.outputs.status != 'success'
        run: |
          sudo apt-get update

          sudo apt-get -y install git gcc make cmake unzip
          git config --global user.email "test@tarantool.io" \
            && git config --global user.name "Tar Antool"

          ARCHIVE_NAME=tarantool-enterprise-sdk-${{ matrix.sdk_version }}.tar.gz
          curl -O -L \
            https://tarantool:${{ secrets.DOWNLOAD_TNT_TOKEN }}@download.tarantool.io/enterprise/release/linux/x86_64/2.8/${ARCHIVE_NAME}
          tar -xzf ${ARCHIVE_NAME}
          rm -f ${ARCHIVE_NAME}
          source tarantool-enterprise/env.sh

          tarantool --version
          cartridge version

          ./create-packages.sh --skip-tdg

      - name: Molecule test
        if: steps.prev_result.outputs.status != 'success'
        run: |
          source venv/bin/activate
          molecule --version
          molecule ${{ matrix.molecule_command }} -s '${{ matrix.molecule_scenario }}'

      - name: Remember result
        run: echo "::set-output name=status::${{ job.status }}" > ${{ runner.temp }}/prev_result
