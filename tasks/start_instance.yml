---
- name: 'Gen config for {{ instance.name }}'
  cartridgeconf:
    instance: '{{ instance }}'
    appname: '{{ cartridge_app_name }}'
    config_defaults: '{{ cartridge_config_defaults }}'
  register: res

- name: 'Set owner and group for {{ cartridge_app_name }} default config file'
  file:
    path: '{{ res.meta.created_default_conf }}'
    owner: tarantool
    group: tarantool
  when: res.meta.created_default_conf is not none

- name: 'Set owner and group for {{ instance.name }} config file'
  file:
    path: '{{ res.meta.created_instance_conf }}'
    owner: tarantool
    group: tarantool
  when: res.meta.created_instance_conf is not none

- name: 'Start systemd service for {{ instance.name }}'
  systemd:
    name: '{{ cartridge_app_name }}@{{ instance.name }}'
    state: started

# XXX: instance_address and instance_probe_uri detection isn't correct now
# If instance has more than one non-local IP address,
#   advertise host will be set to `localhost` (and `instance_address` wouldn' be correct)
# Also, case of `<host>:` format of `advertise_uri` is ignored now
- name: Set instance address and binary port
  set_fact:
    instance_address: '{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}'

- name: Set instance probe uri
  set_fact:
    instance_probe_uri: >-
      {{ instance.advertise_uri
        if ":" in instance.advertise_uri
          else instance_address + ":" + instance.advertise_uri }}

- name: 'Probe {{ instance.name }} instance'
  uri:
    url: 'http://{{ instance_address }}:{{ instance.http_port }}/admin/api'
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    body:
      query: |-
        mutation {
          probe_instance:
            probe_server(uri: "{{ instance_probe_uri }}")
        }
  retries: 5
  delay: 5
  register: result
  until: |
    result.status == 200
      and 'json' in result
      and 'data' in result.json
      and 'probe_instance' in result.json['data']
      and result.json['data']['probe_instance']
