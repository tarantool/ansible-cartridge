---
- name: 'Gen config for {{ instance.name }}'
  cartridgeconf:
    instance: '{{ instance }}'
    appname: '{{ cartridge_app_name }}'
    config_defaults: '{{ cartridge_config_defaults }}'
  register: res

- name: 'Set owner and group for {{ cartridge_app_name }} default config file'
  file:
    path: '{{ res.meta.created_default_conf }}'
    owner: tarantool
    group: tarantool
  when: res.meta.created_default_conf is not none

- name: 'Set owner and group for {{ instance.name }} config file'
  file:
    path: '{{ res.meta.created_instance_conf }}'
    owner: tarantool
    group: tarantool
  when: res.meta.created_instance_conf is not none

- name: 'Start systemd service for {{ instance.name }}'
  systemd:
    name: '{{ cartridge_app_name }}@{{ instance.name }}'
    state: started
  register: start_service

- name: Probe server and set roles
  block:
  # XXX: instance_address and instance_uri detection isn't correct now
  # If instance has more than one non-local IP address,
  #   advertise host will be set to `localhost` (and `instance_address` wouldn' be correct)
  # Also, case of `<host>:` format of `advertise_uri` is ignored now
  - name: Set instance address
    set_fact:
      instance_address: '{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}'

  - name: Set instance probe uri
    set_fact:
      instance_uri: >-
        {{ instance.advertise_uri
          if ":" in instance.advertise_uri
            else instance_address + ":" + instance.advertise_uri }}

  - name: 'Probe {{ instance.name }} instance'
    uri:
      url: 'http://{{ instance_address }}:{{ instance.http_port }}/admin/api'
      method: POST
      body_format: json
      status_code: 200
      return_content: true
      body:
        query: |-
          mutation {
            probe_instance:
              probe_server(uri: "{{ instance_uri }}")
          }
    retries: 5
    delay: 5
    register: response
    until: |-
      response.status == 200
        and 'json' in response
        and 'data' in response.json
        and 'probe_instance' in response.json['data']
        and response.json['data']['probe_instance']


  - name: 'Set {{ instance.name }} role'
    uri:
      url: 'http://{{ instance_address }}:{{ instance.http_port }}/admin/api'
      method: POST
      body_format: json
      status_code: 200
      return_content: true
      body:
        query: |-
          mutation {
            join_server(uri: "{{ instance_uri }}",  roles: [{% for role in instance.roles %} "{{ role }}",{%endfor%}])
          }
    when: instance.roles is defined
    register: response
    failed_when: |-
      not(
        response.status == 200
        and 'json' in response
        and 'data' in response.json
        and 'join_server' in response.json.data
        and response.json.data.join_server
      )
  when: start_service.changed
