---
- name: Check distribution
  fail:
    msg: 'Deploy to {{ ansible_os_family }} distributions is not supported yet'
  when: ansible_os_family not in ["RedHat", "Debian"]
  tags: always

- name: Set remote_user for delegated tasks
  set_fact:
    remote_user: '{{ ansible_user }}'
  when: remote_user is not defined and ansible_user is defined
  tags: always

- name: Validate config
  cartridge_validate_config:
    hosts: '{{ play_hosts }}'
    hostvars: '{{ hostvars }}'
  delegate_to: localhost
  become: false
  run_once: true
  tags: always

# Rewrites cartridge_app_name from package info
- name: Install package
  include_tasks: install_package.yml
  when: >-
    cartridge_package_path is defined and
    inventory_hostname in hostvars | one_not_expelled_instance_for_machine(play_hosts)
  tags: cartridge-instances

- name: Start instance
  include_tasks: start_instance.yml
  when: not expelled
  tags: cartridge-instances

# Restart instances and reload systemd-daemon if required
- meta: flush_handlers

- name: Wait for instance to be started
  cartridge_check_instance_started:
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ inventory_hostname }}.control
  register: check_instance
  until: not check_instance.failed
  retries: '{{ instance_start_timeout // 5 }}'
  delay: 5
  when: not expelled
  tags: cartridge-instances

- name: Connect instance to membership
  cartridge_probe_instance:
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ inventory_hostname }}.control
    hostvars: '{{ hostvars }}'
    play_hosts: '{{ play_hosts }}'
  register: probe
  until: not probe.failed
  retries: 3
  delay: 5
  when: not expelled
  tags: cartridge-instances

- name: Set one control instance to join replicasets
  cartridge_control_instance:
    sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ hostvars | one_not_expelled_instance(play_hosts) }}.control
  register: control_instance
  run_once: true
  delegate_to: '{{ hostvars | one_not_expelled_instance(play_hosts) }}'
  tags: cartridge-replicasets

- name: Get replicasets
  cartridge_get_replicasets:
    hostvars: '{{ hostvars }}'
    play_hosts: '{{ play_hosts }}'
    control_host: '{{ control_instance.meta.host }}'
  register: replicasets
  run_once: true
  tags: cartridge-replicasets

- name: Manage replicasets
  include_tasks: manage_replicaset.yml
  vars:
    replicaset: '{{ item }}'
    join_host: '{{ replicasets.meta.join_host }}'
  loop: '{{ replicasets.meta.replicasets }}'
  run_once: true
  tags: cartridge-replicasets

- name: Expel instance
  include_tasks: expel_instance.yml
  vars:
    control_host: '{{ replicasets.meta.join_host }}'
  when: expelled
  tags: cartridge-replicasets

- name: Set one control instance to rule them all
  cartridge_control_instance:
    sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ hostvars | one_not_expelled_instance(play_hosts) }}.control
    allow_empty: false
  register: control_instance
  run_once: true
  delegate_to: '{{ hostvars | one_not_expelled_instance(play_hosts) }}'
  when: >-
    cartridge_auth is defined
    or cartridge_app_config is defined
    or cartridge_bootstrap_vshard is defined
    or cartridge_failover is defined
  tags: cartridge-config

- name: Cartridge auth
  cartridge_auth:
    auth: '{{ cartridge_auth }}'
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ control_instance.meta.host }}.control
  delegate_to: '{{ control_instance.meta.host }}'
  run_once: true
  when: cartridge_auth is defined
  tags: cartridge-config

- name: Application config
  cartridge_app_config:
    app_config: '{{ cartridge_app_config }}'
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ control_instance.meta.host }}.control
  delegate_to: '{{ control_instance.meta.host }}'
  run_once: true
  when: cartridge_app_config is defined
  tags: cartridge-config

- name: Bootstrap vshard
  cartridge_bootstrap_vshard:
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ control_instance.meta.host }}.control
  delegate_to: '{{ control_instance.meta.host }}'
  run_once: true
  register: bootstrap_vshard
  until: not bootstrap_vshard.failed
  retries: 3
  delay: 5
  when: cartridge_bootstrap_vshard is defined and cartridge_bootstrap_vshard
  tags: cartridge-config

- name: Manage failover
  cartridge_manage_failover:
    failover: '{{ cartridge_failover }}'
    control_sock: /var/run/tarantool/{{ cartridge_app_name }}.{{ control_instance.meta.host }}.control
  delegate_to: '{{ control_instance.meta.host }}'
  run_once: true
  when: cartridge_failover is defined
  tags: cartridge-config
