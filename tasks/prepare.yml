---

- name: 'Check that OS family is supported'
  assert:
    that: ansible_os_family in ["RedHat", "Debian"]
    fail_msg: 'Deploy to {{ ansible_os_family }} distributions is not supported yet'
    quiet: true
  when: ansible_os_family is defined

- name: 'Set "remote_user" for delegated tasks'
  set_fact:
    remote_user: '{{ ansible_user }}'
  when:
    - remote_user is not defined
    - ansible_user is defined

- import_tasks: 'set_instance_facts.yml'

- name: 'Set facts that can be set by the user'
  set_fact:
    delivered_package_path: '{{ cartridge_delivered_package_path | default(omit, true) }}'
    control_instance: '{{ cartridge_control_instance | default(omit, true) }}'
  run_once: true
  delegate_to: localhost
  become: false
  when: >-
    cartridge_delivered_package_path or
    cartridge_control_instance

- name: 'Collect instance info'
  cartridge_get_instance_info:
    app_name: '{{ cartridge_app_name }}'
    instance_name: '{{ inventory_hostname }}'
    paths_to_keep_on_cleanup: '{{ cartridge_paths_to_keep_on_cleanup }}'
    instance_vars:
      cartridge_package_path: '{{ cartridge_package_path }}'
      cartridge_app_install_dir: '{{ cartridge_app_install_dir }}'
      cartridge_app_instances_dir: '{{ cartridge_app_instances_dir }}'
      cartridge_conf_dir: '{{ cartridge_conf_dir }}'
      cartridge_systemd_dir: '{{ cartridge_systemd_dir }}'
      cartridge_run_dir: '{{ cartridge_run_dir }}'
      cartridge_data_dir: '{{ cartridge_data_dir }}'
      cartridge_memtx_dir_parent: '{{ cartridge_memtx_dir_parent }}'
      cartridge_vinyl_dir_parent: '{{ cartridge_vinyl_dir_parent }}'
      cartridge_wal_dir_parent: '{{ cartridge_wal_dir_parent }}'
      cartridge_tmpfiles_dir: '{{ cartridge_tmpfiles_dir }}'
      cartridge_multiversion: '{{ cartridge_multiversion }}'
      stateboard: '{{ stateboard }}'
  register: instance_info_res

- name: 'Set "instance_info" fact'
  set_fact:
    instance_info: '{{ instance_info_res.fact }}'

- name: 'Cache facts for different targets'
  cartridge_get_cached_facts:
    hostvars: '{{ hostvars }}'
  run_once: true
  delegate_to: localhost
  become: false
  register: cached_facts_res

- name: 'Set "cached_facts" fact'
  set_fact:
    cached_facts: '{{ cached_facts_res.facts }}'
  run_once: true
  delegate_to: localhost
  become: false

- name: 'Validate config'
  cartridge_validate_config:
    play_hosts: '{{ play_hosts }}'
    module_hostvars: '{{ cached_facts.validate_config }}'
  run_once: true
  delegate_to: localhost
  become: false

- name: 'Count information about disabled instances in cluster'
  cartridge_get_disabled_instances:
    module_hostvars: '{{ cached_facts.count_disabled_instances }}'
    play_hosts: '{{ play_hosts }}'
  run_once: true
  delegate_to: localhost
  become: false
  register: disabled_instances_res

- name: 'Set "cluster_disabled_instances" and "inventory_disabled_instances" fact'
  set_fact:
    cluster_disabled_instances: '{{ disabled_instances_res.cluster }}'
    inventory_disabled_instances: '{{ disabled_instances_res.inventory }}'
  run_once: true
  delegate_to: localhost
  become: false

- name: 'Select one instance for each physical machine'
  cartridge_get_facts_for_machines:
    module_hostvars: '{{ cached_facts.facts_for_machines }}'
    cluster_disabled_instances: '{{ cluster_disabled_instances }}'
    play_hosts: '{{ play_hosts }}'
  run_once: true
  delegate_to: localhost
  become: false
  register: facts_for_machines_res

- name: 'Set "single_instances_for_each_machine" and "instances_from_same_machine" facts'
  set_fact:
    single_instances_for_each_machine: '{{ facts_for_machines_res.single_instances_for_each_machine }}'
    instances_from_same_machine: '{{ facts_for_machines_res.instances_from_same_machine }}'
  run_once: true
  delegate_to: localhost
  become: false
